/**
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MnemonicPassPhrase } from 'symbol-hd-wallets';
import { Account, NetworkType, PublicAccount, Transaction } from "symbol-sdk";
import { AccountQR, ContactQR, MnemonicQR, ObjectQR, QRCode, TransactionQR } from '../index';
/**
 * Class `QRCodeGenerator` describes a NIP-7 compliant QR Code
 * generator (factory).
 *
 * @since 0.2.0
 */
declare class QRCodeGenerator {
    /**
     * Factory/Singleton pattern, constructor is private.
     *
     * @access private
     */
    private constructor();
    /**
     * Create a JSON object QR Code from a JSON object.
     *
     * @see {ObjectQR}
     * @param   object          {Object}
     * @param   networkType     {NetworkType}
     * @param   generationHash         {string}
     */
    static createExportObject(object: object, networkType?: NetworkType, generationHash?: string): ObjectQR;
    /**
     * Create a Contact QR Code from a contact name
     * and account.
     *
     * @see {ContactQR}
     * @param   transaction     {Transaction}
     * @param   networkType     {NetworkType}
     * @param   generationHash         {string}
     */
    static createAddContact(name: string, account: Account | PublicAccount, networkType?: NetworkType, generationHash?: string): ContactQR;
    /**
     * Create an Account Export QR Code from an Account
     * instance, encrypted with given password.
     *
     * @see {AccountQR}
     * @param   account         {Account}
     * @param   password        {string}
     * @param   networkType     {NetworkType}
     * @param   generationHash         {string}
     */
    static createExportAccount(account: Account, password: string, networkType?: NetworkType, generationHash?: string): AccountQR;
    /**
     * Create a Transaction Request QR Code from a Transaction
     * instance.
     *
     * @see {TransactionQR}
     * @param   transaction     {Transaction}
     * @param   networkType     {NetworkType}
     * @param   generationHash         {string}
     */
    static createTransactionRequest(transaction: Transaction, networkType?: NetworkType, generationHash?: string): TransactionQR;
    /**
     * Create a Mnemonic Export QR Code from a MnemonicPassPhrase
     * instance, encrypted with given password.
     *
     * @see {MnemonicQR}
     * @param   mnemonic        {MnemonicPassPhrase}
     * @param   password        {string}
     * @param   networkType     {NetworkType}
     * @param   generationHash         {string}
     */
    static createExportMnemonic(mnemonic: MnemonicPassPhrase, password: string, networkType?: NetworkType, generationHash?: string): MnemonicQR;
    /**
     * Parse a JSON QR code content into a sub-class
     * of QRCode.
     *
     * @param   json    {string}
     * @return  {QRCode}
     * @throws  {Error}     On empty `json` given.
     * @throws  {Error}     On missing `type` field value.
     * @throws  {Error}     On unrecognized QR code `type` field value.
     */
    static fromJSON(json: string, password?: string): QRCode;
}
export { QRCodeGenerator };
