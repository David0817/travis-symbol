/**
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MnemonicPassPhrase } from 'symbol-hd-wallets';
import { NetworkType } from "symbol-sdk";
import { QRCode, QRCodeDataSchema, QRCodeInterface } from '../index';
declare class MnemonicQR extends QRCode implements QRCodeInterface {
    readonly mnemonic: MnemonicPassPhrase;
    /**
     * The password for encryption
     * @var {string}
     */
    readonly password: string;
    /**
     * The network type.
     * @var {NetworkType}
     */
    readonly networkType: NetworkType;
    /**
     * The network generation hash.
     * @var {string}
     */
    readonly generationHash: string;
    /**
     * Construct a Mnemonic Export QR Code out of the
     * MnemonicPassPhrase and Password instances.
     *
     * @param   mnemonic        {MnemonicPassPhrase}
     * @param   password        {Password}
     * @param   networkType     {NetworkType}
     * @param   generationHash  {string}
     */
    constructor(/**
                 * The mnemonic pass phrase to be exported
                 * @var {MnemonicPassPhrase}
                 */ mnemonic: MnemonicPassPhrase, 
    /**
     * The password for encryption
     * @var {string}
     */
    password: string, 
    /**
     * The network type.
     * @var {NetworkType}
     */
    networkType: NetworkType, 
    /**
     * The network generation hash.
     * @var {string}
     */
    generationHash: string);
    /**
     * Parse a JSON QR code content into a MnemonicQR
     * object.
     *
     * @param   json        {string}
     * @param   password    {string}
     * @return  {MnemonicQR}
     * @throws  {Error}     On empty `json` given.
     * @throws  {Error}     On missing `type` field value.
     * @throws  {Error}     On unrecognized QR code `type` field value.
     */
    static fromJSON(json: string, password: string): MnemonicQR;
    /**
     * The `getTypeNumber()` method should return the
     * version number for QR codes of the underlying class.
     *
     * @see https://en.wikipedia.org/wiki/QR_code#Storage
     * @see {QRUtil.MAX_LENGTH}
     * @return {number}
     */
    getTypeNumber(): number;
    /**
     * The `getSchema()` method should return an instance
     * of a sub-class of QRCodeDataSchema which describes
     * the QR Code data.
     *
     * @return {QRCodeDataSchema}
     */
    getSchema(): QRCodeDataSchema;
}
export { MnemonicQR };
