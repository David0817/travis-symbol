"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var chai_1 = require("chai");
// internal dependencies
var index_1 = require("../index");
describe('EncryptionService -->', function () {
    describe('encrypt() should', function () {
        it('should create encrypted payload with salt', function () {
            // Arrange:
            var data = 'this will be encrypted.';
            var pass = 'password';
            // Act
            var encrypted = index_1.EncryptionService.encrypt(data, pass);
            // Assert
            chai_1.expect(encrypted.ciphertext).to.not.be.undefined;
            chai_1.expect(encrypted.salt).to.not.be.undefined;
            chai_1.expect(encrypted.salt).to.have.lengthOf(64);
        });
        it('should create correctly sized ciphertext and salt', function () {
            // Arrange:
            var data = 'this will be encrypted.';
            var pass = 'password';
            // Act
            var encrypted = index_1.EncryptionService.encrypt(data, pass);
            // Assert
            chai_1.expect(encrypted.ciphertext).to.have.lengthOf(76);
            chai_1.expect(encrypted.salt).to.have.lengthOf(64);
        });
        it('should always create different ciphertext with salt', function () {
            // Arrange:
            var data = 'this will be encrypted.';
            var pass = 'password';
            // Act
            var encrypted_1 = index_1.EncryptionService.encrypt(data, pass);
            var encrypted_2 = index_1.EncryptionService.encrypt(data, pass);
            var encrypted_3 = index_1.EncryptionService.encrypt(data, pass);
            // Assert
            chai_1.expect(encrypted_1).to.not.be.equal(encrypted_2);
            chai_1.expect(encrypted_1).to.not.be.equal(encrypted_3);
            chai_1.expect(encrypted_2).to.not.be.equal(encrypted_3);
            chai_1.expect(encrypted_1.salt).to.have.lengthOf(64);
            chai_1.expect(encrypted_2.salt).to.have.lengthOf(64);
            chai_1.expect(encrypted_3.salt).to.have.lengthOf(64);
        });
    });
    describe('decrypt() should', function () {
        it('should decrypt ciphertext correctly', function () {
            // Arrange:
            var data = 'this will be encrypted';
            var pass = 'password';
            // Act
            var encrypted = index_1.EncryptionService.encrypt(data, pass);
            var decrypted = index_1.EncryptionService.decrypt(encrypted, pass);
            // Assert
            chai_1.expect(decrypted).to.be.equal(data);
        });
    });
});
//# sourceMappingURL=EncryptionService.spec.js.map